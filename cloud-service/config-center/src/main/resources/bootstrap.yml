# 可以配置多环境，但是要怎么用多环境呢？
# 如下的配置active: native，虽然是多配置，但是只能用native指定的位置的配置文件，并没有达到多环境配置的一个效果

#属性必须配置在bootstrap.yml中，这样config-server中的配置信息才能被正确加载。
#springboot对配置文件的加载顺序，对于本应用jar包之外的配置文件加载会优于应用jar包内的配置内容，
#而通过bootstrap.yml对config-server-git的配置，使得该应用会从config-server-git中获取一些外部配置信息，
#这些信息的优先级比本地的内容要高，从而实现了外部化配置。

#* /{application}/{profile}/[{label}]
#* /{application}-{profile}.yml
#* /{label}/{application}-{profile}.yml
#* /{application}-{profile}.properties
#* /{label}/{application}-{profile}.properties
# {label}对应git上不同的分支,默认是master
# {label}对应git上不同的分支


spring:
  application:
    name: config-center # 注册中心应用名称
  # 配置中心最重要部分
  profiles:
    active: git  # 通过spring.profiles.active这里可以指定配置文件在本地,还是classpath下还是在远程git上面
  cloud:
    config:
      server:
        native:
          searchLocations: classpath:/configs/{profile}
#          searchLocations: file:/d:/configs/{profile}
        git:
          uri: https://github.com/servef-toto/cloud-service.git   #配置的git仓库位置
          default-label: master # 默认分支配置部分,未配置label的时候默认使用的分支
          force-pull: true #配置为true表示如果本地副本是脏的，将使Spring Cloud Config Server强制从远程存储库拉取配置。
          searchPaths: 'configs/{profile}'  #仓库文件夹目录，如果是/**，就是所有目录所有文件
          basedir: classpath:/configs/{profile} #配置文件拉去到本地的目录位置
          username: servef-toto
          password: 0311aiWuLiuHong

server:
  port: 0   # 这里配置成0，启动时，项目会随机一个端口号
eureka:
  client:
    serviceUrl:
      defaultZone: http://local.register.com:8761/eureka/ # 可以设置为多注册中心
    registry-fetch-interval-seconds: 5 #表示eureka client间隔多久去拉取服务注册信息，默认为30秒
  instance:
    lease-expiration-duration-in-seconds: 60 #表示注册中心至上一次收到client的心跳之后，等待下一次心跳的超时时间，
                        #在这个时间内若没收到下一次心跳，则将移除该instance。默认为90秒，该值至少应该大于leaseRenewalIntervalInSeconds
    lease-renewal-interval-in-seconds: 20 #表示eureka client发送心跳给server端的频率。如果在leaseExpirationDurationInSeconds后，
                        #server端没有收到client的心跳，则将摘除该instance。除此之外，默认30秒
    prefer-ip-address: true #使用 IP 地址进行服务注册。默认情况下，Eureka 使用 hostname 进行服务注册，以及服务信息的显示，那如果我们使用 IP 地址的方式则配置prefer-ip-address: true
    instance-id: ${spring.application.name}:${random.int}  # 因为我们是随机端口号，我们这里用了随机数字来显示

#监控跟踪管理actuator，可以自定义endpoints具体可以百度
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

# 日志配置
logging:
  level:
    root: info
  file: logs/${spring.application.name}.log